rename(Child1ID = Parent, Child2ID = ID, Child2 = Code)
) %>%
filter(!is.na(Child2))
final_codes <-
code_list %>%
select(Code) %>%
mutate(Child1 = Code, Child2 = Code) %>%
bind_rows(
child1_list %>%
select(Code, Child1) %>%
mutate(Child2 = Child1)
) %>%
bind_rows(
child2_list %>%
select(Code, Child1, Child2)
) %>%
arrange(Code)
unique(final_codes$Code)
# Clean Up Demands ------------------------------------------------------
names(demands)
demands$`Document Title` # Missing Right Now
demands$`Number of Document Authors / Co-Signers` # Missing Right Now
demands_data  <-
demands %>%
select(Title = `Media Title`,
DocTitle = `Document Title`,
OrgType = `Type of Organization`,
NumAuth = `Number of Document Authors / Co-Signers`,
Place = `Excerpt Range`,
Text = `Excerpt Copy`,
Child2 = `Codes Applied Combined`,
Author,
Year,
Link = `Document Link`,
Org = `Type of Organization`) %>%
filter(!is.na(Child2)) %>%
mutate(demand_id = 1:n()) %>%
separate_rows(Child2, sep = ", ") %>%
mutate(Child2 = str_trim(Child2)) %>%
left_join(final_codes) %>%
mutate(YEAR = as.numeric(case_when(
grepl(" ", Year) == TRUE ~ str_sub(Year, -4),
grepl("/", Year) == TRUE ~ str_sub(Year, 1,4),
TRUE ~ Year
)))
setwd("/Users/samuelpowers/Box Sync/VisualizingDemands")
details <- read_csv("./data/document_descriptors_JDWFilled.csv")
demands_text <-    # Some Demands were coded twice as different children of the same overall demand. I want them to be the same.
demands_data %>%
select(demand_id, Title, Place, Text, Year, YEAR) %>%
distinct() %>%
filter(!is.na(YEAR)) %>%
arrange(YEAR) %>%
group_by(Title) %>%
mutate(DemandNum = 1:n()) %>%
mutate(PageNum = floor((DemandNum-1)/10)) %>%
left_join(details) %>%
arrange(YEAR, YearOrder, Title )  %>%
mutate(DocTitle = toupper(DocTitle))
demands_text[is.na(demands_text)] <- ""
details <- read_csv("./data/document_descriptors_JDWFilled.csv")
demands_text <-    # Some Demands were coded twice as different children of the same overall demand. I want them to be the same.
demands_data %>%
select(demand_id, Title, Place, Text, Year, YEAR) %>%
distinct() %>%
filter(!is.na(YEAR)) %>%
arrange(YEAR) %>%
group_by(Title) %>%
mutate(DemandNum = 1:n()) %>%
mutate(PageNum = floor((DemandNum-1)/10)) %>%
left_join(details) %>%
arrange(YEAR, YearOrder, Title )  %>%
mutate(DocTitle = toupper(DocTitle))
demands_text[is.na(demands_text)] <- ""
demands_text <-    # Some Demands were coded twice as different children of the same overall demand. I want them to be the same.
demands_data %>%
select(demand_id, Title, Place, Text, Year, YEAR) %>%
distinct() %>%
filter(!is.na(YEAR)) %>%
arrange(YEAR) %>%
group_by(Title) %>%
mutate(DemandNum = 1:n()) %>%
mutate(PageNum = floor((DemandNum-1)/10)) %>%
left_join(details) %>%
arrange(YEAR, YearOrder, Title )  %>%
mutate(DocTitle = toupper(DocTitle))
demands_text[is.na(demands_text)] <- ""
demands_text$NumSign[is.na(demands_text$NumSign)] <- ""
demands_text$AuthSignType[is.na(demands_text$AuthSignType)] <- ""
demands_text$DocSignAction[is.na(demands_text$DocSignAction)] <- ""
demands_text_final <-
demands_text %>%
mutate(details = str_trim( paste(NumSign, AuthSignType, DocSignAction, sep = " ")))
demands_tags <-
demands_data %>%
select(demand_id, Code) %>%
distinct()
setwd("/Volumes/GoogleDrive/My Drive/Equity Center/Github/uvaequity_demands/VisualLibrary/")
write_csv(demands_text_final, path = "data/demands_text.csv")
write_csv(demands_tags, path = "data/demands_tags.csv")
setwd("/Users/samuelpowers/Box Sync/VisualizingDemands")
details <- read_csv("./data/document_descriptors_JDWFilled.csv")
demands_text <-    # Some Demands were coded twice as different children of the same overall demand. I want them to be the same.
demands_data %>%
select(demand_id, Title, Place, Text, Year, YEAR) %>%
distinct() %>%
filter(!is.na(YEAR)) %>%
arrange(YEAR) %>%
group_by(Title) %>%
mutate(DemandNum = 1:n()) %>%
mutate(PageNum = floor((DemandNum-1)/10)) %>%
left_join(details) %>%
arrange(YEAR, YearOrder, Title )  %>%
mutate(DocTitle = toupper(DocTitle))
demands_text$NumSign[is.na(demands_text$NumSign)] <- ""
demands_text$AuthSignType[is.na(demands_text$AuthSignType)] <- ""
demands_text$DocSignAction[is.na(demands_text$DocSignAction)] <- ""
demands_text_final <-
demands_text %>%
mutate(details = str_trim( paste(NumSign, AuthSignType, DocSignAction, sep = " ")))
demands_tags <-
demands_data %>%
select(demand_id, Code) %>%
distinct()
setwd("/Volumes/GoogleDrive/My Drive/Equity Center/Github/uvaequity_demands/VisualLibrary/")
write_csv(demands_text_final, path = "data/demands_text.csv")
write_csv(demands_tags, path = "data/demands_tags.csv")
setwd("/Users/samuelpowers/Box Sync/VisualizingDemands")
details <- read_csv("./data/document_descriptors_JDWFilled.csv")
demands_text <-    # Some Demands were coded twice as different children of the same overall demand. I want them to be the same.
demands_data %>%
select(demand_id, Title, Place, Text, Year, YEAR) %>%
distinct() %>%
filter(!is.na(YEAR)) %>%
arrange(YEAR) %>%
group_by(Title) %>%
mutate(DemandNum = 1:n()) %>%
mutate(PageNum = floor((DemandNum-1)/10)) %>%
left_join(details) %>%
arrange(YEAR, YearOrder, Title )  %>%
mutate(DocTitle = toupper(DocTitle))
demands_text$NumSign[is.na(demands_text$NumSign)] <- ""
demands_text$AuthSignType[is.na(demands_text$AuthSignType)] <- ""
demands_text$DocSignAction[is.na(demands_text$DocSignAction)] <- ""
demands_text_final <-
demands_text %>%
mutate(details = str_trim( paste(NumSign, AuthSignType, DocSignAction, sep = " ")))
demands_tags <-
demands_data %>%
select(demand_id, Code) %>%
distinct()
setwd("/Volumes/GoogleDrive/My Drive/Equity Center/Github/uvaequity_demands/VisualLibrary/")
write_csv(demands_text_final, path = "data/demands_text.csv")
write_csv(demands_tags, path = "data/demands_tags.csv")
setwd("/Users/samuelpowers/Box Sync/VisualizingDemands")
details <- read_csv("./data/document_descriptors_JDWFilled.csv")
demands_text <-    # Some Demands were coded twice as different children of the same overall demand. I want them to be the same.
demands_data %>%
select(demand_id, Title, Place, Text, Year, YEAR) %>%
distinct() %>%
filter(!is.na(YEAR)) %>%
arrange(YEAR) %>%
group_by(Title) %>%
mutate(DemandNum = 1:n()) %>%
mutate(PageNum = floor((DemandNum-1)/10)) %>%
left_join(details) %>%
arrange(YEAR, YearOrder, Title )  %>%
mutate(DocTitle = toupper(DocTitle))
demands_text$NumSign[is.na(demands_text$NumSign)] <- ""
demands_text$AuthSignType[is.na(demands_text$AuthSignType)] <- ""
demands_text$DocSignAction[is.na(demands_text$DocSignAction)] <- ""
demands_text_final <-
demands_text %>%
mutate(details = str_trim( paste(NumSign, AuthSignType, DocSignAction, sep = " ")))
demands_tags <-
demands_data %>%
select(demand_id, Code) %>%
distinct()
setwd("/Volumes/GoogleDrive/My Drive/Equity Center/Github/uvaequity_demands/VisualLibrary/")
write_csv(demands_text_final, path = "data/demands_text.csv")
write_csv(demands_tags, path = "data/demands_tags.csv")
setwd("/Users/samuelpowers/Box Sync/VisualizingDemands")
details <- read_csv("./data/document_descriptors_JDWFilled.csv")
demands_text <-    # Some Demands were coded twice as different children of the same overall demand. I want them to be the same.
demands_data %>%
select(demand_id, Title, Place, Text, Year, YEAR) %>%
distinct() %>%
filter(!is.na(YEAR)) %>%
arrange(YEAR) %>%
group_by(Title) %>%
mutate(DemandNum = 1:n()) %>%
mutate(PageNum = floor((DemandNum-1)/10)) %>%
left_join(details) %>%
arrange(YEAR, YearOrder, Title )  %>%
mutate(DocTitle = toupper(DocTitle))
demands_text$NumSign[is.na(demands_text$NumSign)] <- ""
demands_text$AuthSignType[is.na(demands_text$AuthSignType)] <- ""
demands_text$DocSignAction[is.na(demands_text$DocSignAction)] <- ""
demands_text_final <-
demands_text %>%
mutate(details = str_trim( paste(NumSign, AuthSignType, DocSignAction, sep = " ")))
demands_tags <-
demands_data %>%
select(demand_id, Code) %>%
distinct()
setwd("/Volumes/GoogleDrive/My Drive/Equity Center/Github/uvaequity_demands/VisualLibrary/")
write_csv(demands_text_final, path = "data/demands_text.csv")
write_csv(demands_tags, path = "data/demands_tags.csv")
library(flexdashboard)
install.packages("flexdashboard")
library(flexdashboard)
library(tidyverse)
library(leaflet)
library(sf)
library(htmltools)
library(RColorBrewer)
# I am demonstrating github
sf <- readRDS("data/sf_combined.Rds")
sflocations <- read_csv("data/sflocations.csv") %>% st_as_sf(
coords = c("lon", "lat"),
crs = 4326,
remove = TRUE
) %>%
filter(!Year %in% c(2019, 2020))
beats <- readRDS("data/beat_pop_map.Rds")
sfs <-
sflocations %>%
mutate(RACE = ifelse(RACE == "W", "White", "Black")) %>%
as_tibble() %>%
select(BEAT_NO, RACE, OFFENSE, SFTYPE) %>%
left_join(
beats %>%
as_tibble() %>%
select(BEAT_NO, NAME) %>%
mutate(BEAT_NO = as.numeric(BEAT_NO))
) %>%
group_by(NAME, BEAT_NO, RACE, SFTYPE) %>%
summarize(Counts = n()) %>%
group_by(NAME) %>%
mutate(total = sum(Counts)) %>%
mutate(Counts = ifelse(RACE ==  "Black", Counts *-1, Counts)) %>%
ungroup() %>%
mutate(RACE = fct_relevel(RACE, "White")) %>%
group_by(NAME, RACE) %>%
mutate(RaceTot = sum(Counts)) %>%
mutate(lab_pos = ifelse(RACE ==  "Black", RaceTot -2, RaceTot + 2))
pal2 <- c("#8dd3c7" ,"#bebada")
ggplot(sfs, aes(x = reorder(NAME, -total), fill = RACE, y = Counts, alpha = SFTYPE), color = "black") +
geom_bar(stat = "identity") + labs(fill = "Race") +
scale_fill_manual(values = pal2) +
geom_text(data = sfs %>% select(NAME, lab_pos, RaceTot) %>% unique(), aes(x = NAME, y = lab_pos, label = abs(RaceTot)), size = 3, inherit.aes = FALSE) +
coord_flip() +
scale_y_continuous(labels = function(x){abs(x)}, limits = c(-60, 60), breaks = c(seq(-40, 40, 20), 0)) +
scale_alpha_discrete(range = c(.6, 1)) +
annotate("text", x = 29, y = -15, label = "Black" ) +
annotate("text", x = 29, y = 15, label = "White" ) +
annotate("rect", xmin = 25, xmax = 26, ymin = 10, ymax = 14, alpha = 1, fill = "#8dd3c7") +
annotate("text", x = 25.5, y = 15, label = "= With Stop and Frisk", size = 3, hjust = 0)+
annotate("rect", xmin = 23.5, xmax = 24.5, ymin = 10, ymax = 14, alpha = .6, fill = "#8dd3c7") +
annotate("text", x = 24, y = 15, label = "= Without Stop and Frisk", size = 3, hjust = 0)+
geom_hline(yintercept  = 0) +
theme_minimal() +
theme(
legend.position = "none",
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title = element_blank(),
panel.grid.major.y = element_line(linetype = "dashed"),
#   axis.text.x = element_blank(),
axis.line.x = element_line(),
axis.ticks.x = element_line()
)
#############################
# Exploring Current Demands #
#############################
library(openxlsx)
library(knitr)
library(tidyverse)
setwd("/Users/samuelpowers/Box Sync/VisualizingDemands")
demands  <- read_csv("./data/excerptsjune24.csv")
codes <- read_csv("./data/codesjune24.csv")
details <- read_csv("./data/document_descriptors_JDWFilled.csv")
shades <- read_csv("./data/shades.csv")
codes <-
codes %>%
select(ID = Id, Parent = `Parent Id`, Depth, Code = Title)
code_list <-
codes %>%
filter(Depth == 0) %>%
select(-Parent, -Depth)
child1_list <-
left_join(code_list,
codes %>%
filter(Depth == 1) %>%
rename(Child1ID = ID, Child1 = Code, ID = Parent) %>%
select(-Depth)
) %>%
filter(!is.na(Child1))
child2_list <-
left_join(
child1_list,
codes %>%
filter(Depth == 2) %>%
rename(Child1ID = Parent, Child2ID = ID, Child2 = Code)
) %>%
filter(!is.na(Child2))
final_codes <-
code_list %>%
select(Code) %>%
mutate(Child1 = Code, Child2 = Code) %>%
bind_rows(
child1_list %>%
select(Code, Child1) %>%
mutate(Child2 = Child1)
) %>%
bind_rows(
child2_list %>%
select(Code, Child1, Child2)
) %>%
arrange(Code)
unique(final_codes$Code)
# Clean Up Demands ------------------------------------------------------
names(demands)
demands$`Document Title` # Missing Right Now
demands$`Number of Document Authors / Co-Signers` # Missing Right Now
demands_data  <-
demands %>%
select(Title = `Media Title`,
DocTitle = `Document Title`,
OrgType = `Type of Organization`,
NumAuth = `Number of Document Authors / Co-Signers`,
Place = `Excerpt Range`,
Text = `Excerpt Copy`,
Child2 = `Codes Applied Combined`,
Author,
Year,
Link = `Document Link`,
Org = `Type of Organization`) %>%
filter(!is.na(Child2)) %>%
mutate(demand_id = 1:n()) %>%
separate_rows(Child2, sep = ", ") %>%
mutate(Child2 = str_trim(Child2)) %>%
left_join(final_codes) %>%
mutate(YEAR = as.numeric(case_when(
grepl(" ", Year) == TRUE ~ str_sub(Year, -4),
grepl("/", Year) == TRUE ~ str_sub(Year, 1,4),
TRUE ~ Year
)))
setwd("/Users/samuelpowers/Box Sync/VisualizingDemands")
details <- read_csv("./data/document_descriptors_JDWFilled.csv")
demands_text <-    # Some Demands were coded twice as different children of the same overall demand. I want them to be the same.
demands_data %>%
select(demand_id, Title, Place, Text, Year, YEAR) %>%
distinct() %>%
filter(!is.na(YEAR)) %>%
arrange(YEAR) %>%
group_by(Title) %>%
mutate(DemandNum = 1:n()) %>%
mutate(PageNum = floor((DemandNum-1)/10)) %>%
left_join(details) %>%
arrange(YEAR, YearOrder, Title )  %>%
mutate(DocTitle = toupper(DocTitle))
demands_text$NumSign[is.na(demands_text$NumSign)] <- ""
demands_text$AuthSignType[is.na(demands_text$AuthSignType)] <- ""
demands_text$DocSignAction[is.na(demands_text$DocSignAction)] <- ""
demands_text_final <-
demands_text %>%
mutate(details = str_trim( paste(NumSign, AuthSignType, DocSignAction, sep = " ")))
demands_tags <-
demands_data %>%
select(demand_id, Code) %>%
distinct()
setwd("/Volumes/GoogleDrive/My Drive/Equity Center/Github/uvaequity_demands/VisualLibrary/")
write_csv(demands_text_final, path = "data/demands_text.csv")
write_csv(demands_tags, path = "data/demands_tags.csv")
demands_for_vis <-
demands_tags %>%
inner_join(demands_text) %>%
group_by(YEAR, Title, Code) %>%
summarize(n = n()) %>%
spread(Code, n, fill = 0) %>%
gather(Code, Count, -c(YEAR, Title)) %>%
left_join(details) %>%
arrange(YEAR, YearOrder, Title )
demands_for_vis[is.na(demands_for_vis)] <- ""
demands_for_vis_final <-
demands_for_vis %>%
mutate(details = str_trim( paste(NumSign, AuthSignType, DocSignAction, sep = " "))) %>%
filter(!Title  == "Diversity Recommendation Index_8_14_17.pdf")
setwd("/Volumes/GoogleDrive/My Drive/Equity Center/Github/uvaequity_demands/Analysis/")
write_csv(demands_for_vis_final, path =  "data/demands.csv")
demands_for_vis <-
demands_tags %>%
inner_join(demands_text) %>%
group_by(YEAR, Title, Code) %>%
summarize(n = n()) %>%
spread(Code, n, fill = 0) %>%
gather(Code, Count, -c(YEAR, Title)) %>%
left_join(details) %>%
arrange(YEAR, YearOrder, Title )
pre_chord <-
demands_for_vis %>%
filter(!Title  == "Diversity Recommendation Index_8_14_17.pdf") %>%
group_by(Demographic, Code) %>%
summarize(Count = sum(Count)) %>%
spread(Demographic, Count)
names(pre_chord)
codes <- pre_chord$Code
outputdat <- NULL
for (k in codes) {
tempdat <- pre_chord[pre_chord$Code == k, -1]
dimension <- ncol(tempdat)
finaldat = matrix(rep(0, dimension*dimension ), ncol = dimension)
namelist <- names(tempdat)
for (i in 1:dimension) {
for (j in 1:dimension) {
colnames(finaldat) <- namelist
finaldat[j, i] <- min(tempdat[,i], tempdat[, j])
}
}
finaldat <- as.data.frame(finaldat)
finaldat$Code = k
finaldat$Demographic = namelist
outputdat <-
rbind(outputdat, finaldat)
}
View(outputdat)
chord_data <-
outputdat %>%
as_tibble() %>%
bind_rows(
outputdat %>%
select(-Code) %>%
group_by(Demographic) %>%
summarise_all(sum) %>%
mutate(Code = "Total")
) %>%
mutate_at(vars(Alumni:`University Office`), as.numeric) %>%
mutate(RowSum = Alumni +
`APIDA Students` +
`Black Students` +
`Faculty/Staff` +
`Latinx Students` +
Students +
`University Office`) #  %>%
demands_for_vis <-
demands_tags %>%
inner_join(demands_text) %>%
group_by(YEAR, Title, Code) %>%
summarize(n = n()) %>%
spread(Code, n, fill = 0) %>%
gather(Code, Count, -c(YEAR, Title)) %>%
left_join(details) %>%
arrange(YEAR, YearOrder, Title )
demands_for_vis
demands_for_vis %>%
filter(!Title  == "Diversity Recommendation Index_8_14_17.pdf") %>%
group_by(Code, Demographic) %>%
summarize(Count = sum(Count))
mutate(Percent = round(Count/sum(Count)*100, 1))
demands_for_vis %>%
filter(!Title  == "Diversity Recommendation Index_8_14_17.pdf") %>%
group_by(Code, Demographic) %>%
summarize(Count = sum(Count)) %>%
group_by(Code) %>%
mutate(Percent = round(Count/sum(Count)*100, 1))
demographic_breakdown <-
demands_for_vis %>%
filter(!Title  == "Diversity Recommendation Index_8_14_17.pdf") %>%
group_by(Code, Demographic) %>%
summarize(Count = sum(Count)) %>%
group_by(Code) %>%
mutate(Percent = round(Count/sum(Count)*100, 1))
setwd("/Volumes/GoogleDrive/My Drive/Equity Center/Github/uvaequity_demands/Analysis/")
write_csv(demographic_breakdown, path =  "data/demos.csv")
demographic_breakdown_prep <-
demands_for_vis %>%
filter(!Title  == "Diversity Recommendation Index_8_14_17.pdf") %>%
group_by(Code, Demographic) %>%
summarize(Count = sum(Count)) %>%
group_by(Code) %>%
mutate(Percent = round(Count/sum(Count)*100, 1))
demographic_breakdown <-
demographic_breakdown_prep %>%
bind_rows(
demographic_breakdown_prep %>%
group_by(Demographic) %>%
summarize(Count = sum(Count)) %>%
mutate(Percent = round(Count/sum(Count)*100, 1))
)
demographic_breakdown
setwd("/Volumes/GoogleDrive/My Drive/Equity Center/Github/uvaequity_demands/Analysis/")
write_csv(demographic_breakdown, path =  "data/demos.csv")
demographic_breakdown <-
demographic_breakdown_prep %>%
group_by(Demographic) %>%
summarize(Count = sum(Count)) %>%
mutate(Percent = round(Count/sum(Count)*100, 1)) %>%
bind_rows(
demographic_breakdown_prep
)
demographic_breakdown
demographic_breakdown <-
demographic_breakdown_prep %>%
group_by(Demographic) %>%
summarize(Count = sum(Count)) %>%
mutate(Percent = round(Count / sum(Count) * 100, 1),
Code = "Total") %>%
bind_rows(demographic_breakdown_prep)
demographic_breakdown
setwd("/Volumes/GoogleDrive/My Drive/Equity Center/Github/uvaequity_demands/Analysis/")
write_csv(demographic_breakdown, path =  "data/demos.csv")
